#!/usr/bin/env python3
#
# Copyright 2012-2022, 42Lines, Inc.
# Original Author: Jim Browne
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from argparse import ArgumentParser

import boto3
import botocore
import pynagios
from pynagios import Plugin, Response


class AvailabilityZonesCheck(Plugin):
    parser = ArgumentParser(add_help=False)

    parser.add_argument("--profile",
                        help="AWS profile to use (default: none)",
                        action="store")
    parser.add_argument("--region",
                        help="Region to check (default: us-east-1)",
                        default=[],
                        action="append")
    parser.add_argument("--all",
                        help="Check all regions",
                        action="store_true")

    responses = []
    include_message_field = False
    session = None
    ec2_client = None


    def check(self):
        self.session = boto3.Session(profile_name=self.options.profile)

        if not self.options.region:
            self.options.region = ["us-east-1"]

        if self.options.all:
            check_regions = self.session.get_available_regions('ec2')
        else:
            check_regions = []
            for option_region in self.options.region:
                for aws_region in self.session.get_available_regions('ec2'):
                    if aws_region == option_region:
                        check_regions.append(aws_region)
                        break
                else:
                    message = "Region %s not found." % option_region
                    return Response(pynagios.UNKNOWN, message)

        for check_region in check_regions:
            # Create client here to facilitate testing
            self.ec2_client = self.session.client('ec2', region_name=check_region)
            self.regioncheck(check_region)

        if self.responses:
            result = Response(pynagios.WARNING, ", ".join(self.responses))
        else:
            result = Response(pynagios.OK, "Checked regions: " +
                              ", ".join(check_regions))
        return result

    def regioncheck(self, region):
        '''Check selected regions'''

        try:
            zones = self.ec2_client.describe_availability_zones()
        except botocore.exceptions.ClientError as error:
            message = (
                "Exception describing zones."
                "  Bad credentials or disabled region (%s)?"
                "  Error: %s"
                ) % (region, error)
            self.responses.append(message)
            return

        for zone in zones['AvailabilityZones']:
            if self.options.verbosity:
                debug = "name %s state %s" % (zone['ZoneName'], zone['State'])
                if self.include_message_field:
                    debug += " message %s" % ("; ".join(zone['Messages']))
                print(debug)

            if zone['State'] != 'available':
                message = "%s:%s" % (region, zone['ZoneName'])
                message += " state %s" % (zone['State'])
                if self.include_message_field:
                    message += " (\"%s\")" % ("; ".join(zone['Messages']))
                self.responses.append(message)


if __name__ == "__main__":

    # Instantiate the plugin, check it, and then exit
    AvailabilityZonesCheck().check().exit()
